### VERSION 0.9 (getting quite big but no stable version in sight)

## New features
- TextEdit element for easy text editing
	- Delete letters at position of cursor (function to delete letter before contentIndex)
	- Getter for active word (for word suggest etc)
	- DEBUGGING! Especially when there are sub words
- Ring Container
- InteractionLogging
  - What to do with Sensors and penetration?

## Other
- think about different keyboard layouts set in xml (web pages do not need umlaute)
- setDimming / Marking: give element and offset from it in tree so only that is dimmed
  - Test dimming / marking
- Check input of stylesheet parser / interface function and DO NOT crash when it cannot be parsed.... (some fancy structure check...)
- Dictionary
  - write email to utf8rewind author because of windows fix
- Keyboard
  - Better german and english layout
- Accept pointer to input instead of reference in interface
- Improve resize chaos
  - At the moment: adding layouts -> direct resize. changing flow size -> no direct resize. what :D some resize before drawing would be cool.. (then drawing no more const but ok)
- Let one create Stacks without inner element (either that or a Nothing element)

## Testing
- test hitButton fuction in combination with visibility etc
- Interaction notification and inner size in elements

## Keyboard
- Coloring suggestions
- Coloring letters corresponding to suggestions
  - just for next letter, guide you through word
- Optional: Somehow suggestions in letters <- think about other keyboard

## Wiki
- Dictionary
  - UTF-8 (otherwise umlaute etc are wrong interpreted) -> everything should be in UTF8 encoding
- WordSuggest
- ThresholdColor + DimAlpha
- icon element descriptions (desc, desckey)
- Flow
  - flow-speed-multiplier
- ProgressBar
- flash-color
- flash-duration
- stack direction
- text-edit-scroll-speed-multiplier

### VERSION 0.11
- Redo font packing algorithm
- Audio (PortAudio library?)
  - Audio effects defined in style sheet
- Improve keyboard

### VERSION 0.x
- WordSuggest / Flow: maybe some area in the center, where no scrolling happens?
- IDEA: disable opengl storing stuff by function (to save computation time)
- Right to left text (hebrew)
	- Maybe detect hebrew characters and react
- Localization reloading on the fly (all textflows would have to be recalculated, maybe other default font...)
- Input: Consumption is strange, because for example button used input and then element update method does not know, whether it was submethod or other element. Ok, it could guess because before call of specialUpdate it was not and after that it was.
- uniform absolute include pathes
- Think about: how to automatically fit text into box or fit box around text
- set scale of text via interface (and determine whether text fits via interface?)
- streamline interface a little bit (highlight interactive element ist strange for example)
- TextFlow not perfect. Take a look at tests with description in IconElements. When it gets too narrow, letters start to miss and no "..." is displayed
- Instead of FontAtlas, do Font caching
- What about "GazeSnap"? Snapping to focused element and exit it with blink or so
- Reset with bit masks (what to reset)
- Maybe make possible to limit adaptive scaling to certain elements or tell it: do not make that elements smaller, only bigger is allowed

### VERSION 1.0
- Code review!
  - valgrind
  - Check all fin whether utf-8 compatible
- Some members of element could be private but getters necessary..

Notes:
- OpenGL state: bound texture not rescued  (neither in texture/font class nor in GLSetup)
- Altough Keyboard is interactive element, interact and select are NOT implemented because not trivial and not that important
- RenderItem: some shader programs optimize uv attribute away, so cannot be set and throw opengl error
- maybe switch to double to accumulate time. otherwise, every half hour there will be flickering
- Precaching of textures (maybe write something to an text file)
- Maybe use sampler states for textures instead of per texture settings
- Strange or hacky: Since OGL functions are loaded already by the library, what happens in the main program doing the same? Seems to work at least...
- Mapping of images / icons would be cool (easy exchange in whole application) (path without .png or .svg is interperted as mapping)
- Use UTF8-CPP for config and stylesheet (what would be the advantage?)
- Input
  - Maybe blocks have an option: kill or not kill input (both possible)
  - is selecting via keyboard input? (at the moment it is not blocked if input is disabled for layout)

Reminders:
- Parser responsible for value ranges!
- XML may not contain information about current state (activity, hiding etc!!!)
- namespaces easier because Layout and GUI is visible to outer space
- Input: can be NULL if irrelevant for Element
- Getter for transform and size do only work after first update
- Namespaces easier because Layout and GUI is visible to outer space
- Element's mBorderAspectRatio for avoiding borders to kill aspect ratio only used in picture at the moment
- Localization files MUST BE encoded in UTF-8
